[
  "Amazon\u0001CloudWatch\u0001Synthetics\u0001now\u0001supports\u0001Playwright\u0001runtime\u0001to\u0001create\ncanaries\u0001with\u0001NodeJS\u0001の使い所を考える\nしむそく\u0001Radio\ntubone24\n(@meitante1conan)",
  "@meitante1conan\nゆるふわエンジニア\n犬と遊んでいる\n特徴\n自己紹介\nYu Otsubo (tubone24)",
  "@meitante1conan\nゆるふわエンジニア\n犬と遊んでいる\n特徴\n自己紹介\nYu Otsubo (tubone24)\nAWS re:Invent 2024 \n\u0000\u0000\u0000\u0000",
  "そんな私がお送りするのが",
  "2024/11/21に出たこちらのアップデート",
  "Amazon CloudWatch\nSynthetics\nってなんだよ...",
  "Amazon\u0001CloudWatch\u0001Syntheticsとは\nCanaryと呼ばれるスクリプトを使用して監視を実行\nNode.jsまたはPythonランタイムのLambda関数として実行\nPuppeteerやSeleniumを使用してヘッドレスブラウザで監視\nAmazon\u0001CloudWatch\u0001Syntheticsとは\nWebアプリケーションやAPIエンドポイントに対して、\nユーザーと同じアクションを模倣して実行し、\nパフォーマンスや可用性を監視するマネージドサービス\nCloudWatch\u0001RUMやApplication\u0001Signals(X-Ray)との統合も可能",
  "Amazon\u0001CloudWatch\u0001Syntheticsとは\nCanaryと呼ばれるスクリプトを使用して監視を実行\nNode.jsまたはPythonランタイムのLambda関数として実行\nPuppeteerやSeleniumを使用してヘッドレスブラウザで監視\nAmazon\u0001CloudWatch\u0001Syntheticsとは\nWebアプリケーションやAPIエンドポイントに対して、\nユーザーと同じアクションを模倣して実行し、\nパフォーマンスや可用性を監視するマネージドサービス\nCloudWatch\u0001RUMやApplication\u0001Signals(X-Ray)との統合も可能\n難しいね....",
  "Amazon\u0001CloudWatch\u0001Synthetics\u0001Canary\nAmazon\u0001CloudWatch\u0001Syntheticsとは\n\u0000工的な\n\u0000工的な\n\u0000工的な\n※覚え方、翻訳の仕方は諸説あります..多分",
  "Amazon\u0001CloudWatch\u0001Synthetics\u0001Canary\nAmazon\u0001CloudWatch\u0001Syntheticsとは\n\u0000工的な\n\u0000工的な\n\u0000工的な\nカ\nナ\nリ\nア\n※覚え方、翻訳の仕方は諸説あります..多分",
  "Amazon\u0001CloudWatch\u0001Synthetics\u0001Canary\nAmazon\u0001CloudWatch\u0001Syntheticsとは\n\u0000工的な\n\u0000工的な\n\u0000工的な\nカ\nナ\nリ\nア\nシンセサイザーも「波形を合成」した\n人工的な音\n炭鉱の有毒ガス検知に\nカナリアが使われてたらしい",
  "Amazon\u0001CloudWatch\u0001Synthetics\u0001Canary\nAmazon\u0001CloudWatch\u0001Syntheticsとは\n\u0000工的な\n\u0000工的な\n\u0000工的な\nカ\nナ\nリ\nア\nシンセサイザーも「波形を合成」した\n人工的な音\n炭鉱の有毒ガス検知に\nカナリアが使われてたらしい\n要はユーザーリクエストを模擬して\nアプリの正常性を\n監視する",
  "これがSynthetics\u0001Canaryだ！！！\n（引用元：【AWS\u0001Black\u0001Belt\u0001Online\u0001Seminar】\u0001Amazon\u0001CloudWatch\u0001Synthetics)",
  "これがSynthetics\u0001Canaryだ！！！\n（引用元：【AWS\u0001Black\u0001Belt\u0001Online\u0001Seminar】\u0001Amazon\u0001CloudWatch\u0001Synthetics)\nHeadless\u0001Chromeが動\nくLambdaが自動で作成\nされる",
  "これがSynthetics\u0001Canaryだ！！！\n（引用元：【AWS\u0001Black\u0001Belt\u0001Online\u0001Seminar】\u0001Amazon\u0001CloudWatch\u0001Synthetics)\nPuppeteerで書かれた\nテストコードがLayersで\nLambdaに連携される",
  "Amazon\u0001CloudWatch\u0001Syntheticsとは\nCanaryと呼ばれるスクリプトを使用して監視を実行\nNode.jsまたはPythonランタイムのLambda関数として実行\nPuppeteerやSeleniumを使用してヘッドレスブラウザで監視\nAmazon\u0001CloudWatch\u0001Syntheticsとは\nWebアプリケーションやAPIエンドポイントに対して、\nユーザーと同じアクションを模倣して実行し、\nパフォーマンスや可用性を監視するマネージドサービス\nCloudWatch\u0001RUMやApplication\u0001Signals(X-Ray)との統合も可能",
  "Amazon\u0001CloudWatch\u0001Syntheticsとは\nCanaryと呼ばれるスクリプトを使用して監視を実行\nNode.jsまたはPythonランタイムのLambda関数として実行\nPuppeteerやSeleniumを使用してヘッドレスブラウザで監視\nAmazon\u0001CloudWatch\u0001Syntheticsとは\nWebアプリケーションやAPIエンドポイントに対して、\nユーザーと同じアクションを模倣して実行し、\nパフォーマンスや可用性を監視するマネージドサービス\nCloudWatch\u0001RUMやApplication\u0001Signals(X-Ray)との統合も可能\nPlaywright対応！",
  "で...?",
  "何が嬉しいの？",
  "Playwrightだと\n何が嬉しいの？\nBEFORE\u0001(Puppeteer)\nAFTER\u0001(Playwright)\n専用に覚えなきゃ...\n(とは言ってもシンプルだし、割とデファクトな書き方ではある）\nテストの書きやすさが向上！\n最近では案件の自動テストをPlaywrightで書いている人も多い？\n案件の中の自動テストと\n同じ書き味",
  "Playwrightだと\n何が嬉しいの？\nだいぶ前(2024/5頃)にはCypressを超えるダウンロード数\n直近ではpuppeteerも超えてきた",
  "BEFORE\u0001(Puppeteer)\nAFTER\u0001(Playwright)\n細かいところですが、ES\u0001Moduleでの書き方にも対応\nCommonJSで記載されている\nスクリプトをIaCなどで別途上げる\n際、\nnode_modules内に閉じ込めないとい\nけない。\nES\u0001Moduleに対応\nディレクトリも自由度アップ",
  "Playwrightだと\n何が嬉しいの？\nBEFORE\u0001(Puppeteer)\nAFTER\u0001(Playwright)\n要素が出てこないときの\nwaitを明示的に記載\nテストの書きやすさが向上！\nそもそも案件の自動テストをPlaywrightで書いている人も多い？\n自動待機機能で\nある程度吸収できる",
  "BEFORE\u0001(Puppeteer)\nAFTER\u0001(Playwright)\nPlaywrightだと何が嬉しいの？\nアップロードが完了してから\nボタンが出現する\n↓\nボタンの出現を明示的に待つ\n直感的にボタンのクリックを\nすればいい",
  "synthetics.jsonでスクリーンショットやログの出力を細かく制御できる\nスクリーンショットのタイミング\nやCloudWatch\u0001Logsに出力する\nログの制御も細かくできる",
  "synthetics.jsonでスクリーンショットやログの出力を細かく制御できる\n\u0001\nconsole.logのほか、ネットワーク\nのロギングもできるため、問題が\n発生した際の切り分けにも役立つ",
  "でもお高いんでしょ\nう...?",
  "でもお高いんでしょう...?\n1時間あたり:\u0001 12回（60分÷5分）\n1日あたり:\u0001 288回（12回×24時間）\n1ヶ月あたり:\u0001 8,640回（288回×30日）\n東京リージョンの料金:\u0001 0.0019\u0001USD/実行\n基本月額料金:\u0001 約16.23\u0001USD（0.0019\u0001USD\u0001×\u0001  8,540回）\n安くはないね...\n月額料金: 約79.51 USD\n（基本料金 + Lambda実行時間料金）\n実行時間:\u0001 5分（300秒）/回\nLambda料金:\u0001 0.0000166667\u0001USD/GB-秒\nメモリ使用量:\u0001 1500MB\nLambda月額料金:\u0001 約63.28\u0001USD\nLambdaの実行料金もかかってくるのは注意",
  "例えばこうやって使って\nみよう",
  "CI/CDに組み込んでデプロイ時の正常性確認に利用する\n最初からカナリアを飛ばさずに\nここぞというときにカナリアを飛ばしてみよう",
  "AWS\u0001CLIでSynthetics\u0001Canaryを起動できる\nCI/CDに組み込んでデプロイ時の正常性確認に利用する",
  "AWS\u0001CLIでステータスを確認できる\nCI/CDに組み込んでデプロイ時の正常性確認に利用する",
  "デプロイパイプラインの最後に\nカナリアを飛ばすことで、基本動作は\n自動で確認完了！！！ 浮いた時間で遊ぼう。\nCI/CDに組み込んでデプロイ時の正常性確認に利用する",
  "おまけ！！",
  "おまけ！！",
  "おまけ！！\nこのLambda何やねん...!!!\u0001問題の解決に繋がりそう！",
  "ありがとうございました！"
]