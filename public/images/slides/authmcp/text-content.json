[
  "MCP\nにおける認証・認可\n2025.6.13",
  "1\nKDDI Agile Development Center Corporation \n自己紹介",
  "2\nKDDI Agile Development Center Corporation \nMCP\nにおける認証・認可の重要性",
  "3\nKDDI Agile Development Center Corporation \nリモート\nMCP\nサーバーの普及や機微情報の扱いにおいて認証認可は重要\nMCP\nにおける認証・認可の重要性\n従来\nこれから\n【\n\nポイント\n\n】\nローカル\nMCP\nサーバーは接続コンフィグ\n(\nclaude_desktop_config.json\nなど\n)\nに\n強力なアクセストークンがそのまま記載されてしまう\n一方でリモート\nMCP\nサーバーは\nMCP\nサーバー専用のアクセストークンを払い出す形",
  "4\nKDDI Agile Development Center Corporation \nリモート\nMCP\nサーバーに強力な\nAPI\nキーを渡すことはできない\n!\nMCP\nにおける認証・認可の重要性\nAPI\nは静的トークン\n= \n漏洩時の影響が大きすぎる\n•\n定期的なキーローテをユーザーに求める必要がある\n•\n→\n誰もやらない\n•\n(\n外部の\n)MCP\nサーバー内にキーを抱え込みにくい\n•\nDB\nの\nID/PW\nとかとてもじゃないけど持てない\n•\nSaaS\n権限とは別にリソースサーバーとしての\nMCP\nサーバーの権限制御ができない\n•\nSharePoint\nを読み込めるけど、既存の記事は編集できない、など。\nhttps://github.com/modelcontextprotocol/modelcontextprotocol/discussions/234\nこのあたりで議論されていました。",
  "5\nKDDI Agile Development Center Corporation \n大きな特徴は、\nMCP\nクライアント\nvs \nサーバー間の認可と\nMCP\nサーバー\nvs \n外部プロダクト間の認可の二つがあること\nMCP\nにおける認証・認可の重要性\nhttps://modelcontextprotocol.io/specification/draft/basic/security_best_practices#token\n-\npassthrough\nにて規定されます",
  "6\nKDDI Agile Development Center Corporation \nなので、認証認可が完了すると、二つのアクセストークンが出来上がる状態。\n加えて言うと、二つのアクセストークンを紐づける仕組みが必要になる。\nMCP\nにおける認証・認可の重要性\nよくある手法として\nKeyValue\nでそれぞれの認証・認可のフローで必要な情報を保存しておく。\nDB\nとして\nTTL\nが設定できるとなおセッション感が出てよい。",
  "7\nKDDI Agile Development Center Corporation \nMCP(OAuth2.1)\nを支える技術",
  "8\nKDDI Agile Development Center Corporation \nPKCE(\nピクシーと読む\n)\nを用いた認可フロー\n(MUST)\nMCP(OAuth2.1)\nを支える技術\nProof Key for Code Exchange by OAuth Public Clients\n-\n認可コードを横取りされない仕組み\n-\n認可リクエスト者とトークンリクエスト者が同じである証明\n-\n乱数とそのハッシュをそれぞれで突合させる\n-\nパブリックなクライアントでも使える\n-\nクライアントを証明する方法\n=>\nクライアントクレデンシャル\n-\nWeb\nページやスマホには埋め込めない欠点\n-\nクライアントを証明する代わりの方法\nhttps://datatracker.ietf.org/doc /html/draft\n-\nietf\n-\noauth\n-\nv2\n-\n1\n-\n12",
  "9\nKDDI Agile Development Center Corporation \nメタデータディスカバリー\n(\nAuthorization Server Metadata\n)\nMCP(OAuth2.1)\nを支える技術\nMCP\nサーバーにいざアクセスしても、どこを叩いて\n認証・トークン取得すればいいかわからない。\nなので、\nwell\n-\nknown\nディレクトリとして、\n認証に関する情報をまとめておくエンドポイントを用意する\nことが推奨される\n(Server\nは\nSHOULD\n、\nClient\nは\nMUST)\n対応してない場合は、下記のデフォルトエンドポイントを\n暗黙的に利用する\n■デフォルトエンドポイント\n-\n/authorize \n認証エンドポイント\n-\n/\ntoken \nトークンエンドポイント\n-\n/\nregister \n動的クライアント登録エンドポイント\nhttps://datatracker.ietf.org/doc /html/rfc8414",
  "10\nKDDI Agile Development Center Corporation \nメタデータディスカバリー\n(\nProtected Resource Metadata  \n-\nMUST\n)\nMCP(OAuth2.1)\nを支える技術\n細かいですが、メタデータディスカバリーには、\n-\n認可サーバー側の機能\n-\nリソースサーバー側の機能\nの\n2\nつが別々の\nRFC\nで規定されている\nMCP\nサーバーはリソースサーバーであるため、\nリソースサーバー側のメタデータディスカバリの\n実装は\nMUST\nとなっている。\nhttps://\ndatatracker.ietf.org\n/doc /html/rfc9728",
  "11\nKDDI Agile Development Center Corporation \n動的クライアント登録\n(DCR \n-\nSHOULD)\nMCP(OAuth2.1)\nを支える技術\nOAuth\nのクライアントを設定したことがある人はわかるかも\n-\n事前にクライアント\nID\nとシークレットを登録する必要あり\n-\nMCP\nクライアントに毎度設定するのは大変\n-\nリクエストに応じてクライアント\nID\nを発行する仕組み\nGitHub\nの例\nhttps://datatracker.ietf.org/doc /html/rfc7591",
  "12\nKDDI Agile Development Center Corporation \nデモ\n(\n自作のリモート\nMCP\nサーバー\n+Inspector)",
  "13\nKDDI Agile Development Center Corporation \nデモの振り返り\n今回のコードは次のレポジトリに保存してます\nまた、仕組みを作るのに\nCloudflare workers\nと\nKV\nを使いました\nhttps://github.com/tubone24/remote\n-\nmcp\n-\noauth\n-\ngithub",
  "14\nKDDI Agile Development Center Corporation \nデモの振り返り\nStreamable\nHTTP\nのエンドポイント\n(/\nmcp\n)\nにアクセスすると\n認証を求められる",
  "15\nKDDI Agile Development Center Corporation \nデモの振り返り\n認証に関するエンドポイントを一覧もらう\nこれがメタデータディスカバリー",
  "16\nKDDI Agile Development Center Corporation \nデモの振り返り\nクライアントを自動で登録して以降の\nOAuth\nクライアントとして利用\nこれが\nDCR",
  "17\nKDDI Agile Development Center Corporation \nデモの振り返り\nAuthorization URL\nを発行\nDCR\nで作成された\nclient_id\nに加え、\ncode_challenge\nが設定されている\nこれが\nPKCE",
  "18\nKDDI Agile Development Center Corporation \nデモの振り返り\nフローにするとこんな感じですが、詳細は割愛",
  "19\nKDDI Agile Development Center Corporation \nデモの振り返り\nトークン取得処理で\ncode\nの検証を実施\nこれが\nPKCE",
  "20\nKDDI Agile Development Center Corporation \n閑話休題",
  "21\nKDDI Agile Development Center Corporation \n認可サーバーとリソースサーバーってくっつけていいの︖\n閑話休題\n「ベストプラクティスじゃない」\nが現状の規格だと、\nMCP\nサーバーがトークンの発行まで実施\nベストプラクティスに従えば、認可サーバーとリソースサーバーは\n分けるべき。\nよって下記の\nIssue\nなどでより良い方式が今なお、\n議論がされているところです。\nhttps://\ngithub.com\n/\nmodelcontextprotocol\n/\nmodelcontextprotocol\n/issues/205",
  "22\nKDDI Agile Development Center Corporation \nもっと\nMCP\nについて学びたい人は\n...\n閑話休題",
  "Be a Change Leader.\nアジャイルに力を与え\n共に成⻑し続ける社会を創る",
  "24\nKDDI Agile Development Center Corporation \nAppendix",
  "25\nKDDI Agile Development Center Corporation \nデモ\n-\nシーケンス",
  "26\nKDDI Agile Development Center Corporation \nデモがうまく行かなかった用",
  "27\nKDDI Agile Development Center Corporation \nデモがうまく行かなかった用",
  "28\nKDDI Agile Development Center Corporation \nデモがうまく行かなかった用",
  "29\nKDDI Agile Development Center Corporation \nデモがうまく行かなかった用",
  "30\nKDDI Agile Development Center Corporation \nデモがうまく行かなかった用",
  "31\nKDDI Agile Development Center Corporation \nデモがうまく行かなかった用",
  "32\nKDDI Agile Development Center Corporation \nデモがうまく行かなかった用",
  "33\nKDDI Agile Development Center Corporation \nデモがうまく行かなかった用",
  "34\nKDDI Agile Development Center Corporation \nデモがうまく行かなかった用"
]