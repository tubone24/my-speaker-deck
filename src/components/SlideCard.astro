---
// スライドカードコンポーネント
const { slide } = Astro.props;

// 日付をフォーマット
const date = new Date(slide.date).toLocaleDateString('ja-JP', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
});

// サムネイルの数を制限（最大5枚）
const thumbnailsToShow = slide.thumbnails ? slide.thumbnails.slice(0, Math.min(5, slide.pageCount)) : [slide.thumbnail];
---

<div class="slide-card" data-thumbnails={JSON.stringify(thumbnailsToShow)}>
    <a href={`/slides/${slide.id}/1`} class="slide-link">
        <div class="slide-thumbnail-container">
            <img src={slide.thumbnail} alt={slide.title} loading="lazy" class="slide-thumbnail active" />

            {slide.thumbnails && slide.thumbnails.slice(0, Math.min(5, slide.pageCount)).map((thumb, index) => (
                index > 0 && <img src={thumb} alt={`${slide.title} - スライド ${index + 1}`} loading="lazy" class="slide-thumbnail" />
            ))}
        </div>
        <div class="slide-info">
            <h2 class="slide-title">{slide.title}</h2>
            <div class="slide-meta">
                <time datetime={slide.date}>{date}</time>
                <span class="slide-pages">{slide.pageCount} ページ</span>
            </div>
        </div>
    </a>
</div>

<style>
    .slide-card {
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .slide-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .slide-link {
        text-decoration: none;
        color: inherit;
        display: block;
    }

    .slide-thumbnail-container {
        width: 100%;
        height: 180px;
        background-color: #f5f5f5;
        overflow: hidden;
        position: relative;
    }

    .slide-thumbnail {
        width: 100%;
        height: 100%;
        object-fit: cover;
        position: absolute;
        top: 0;
        left: 0;
        opacity: 0;
        transition: opacity 0.5s ease;
    }

    .slide-thumbnail.active {
        opacity: 1;
    }

    .slide-info {
        padding: 1rem;
    }

    .slide-title {
        font-size: 1.1rem;
        margin: 0 0 0.5rem 0;
        color: #2c3e50;
        line-height: 1.3;
    }

    .slide-meta {
        display: flex;
        justify-content: space-between;
        font-size: 0.85rem;
        color: #7f8c8d;
    }
</style>

<script>
    // スライドホバー時のめくり効果
    document.addEventListener('DOMContentLoaded', () => {
        const slideCards = document.querySelectorAll('.slide-card');

        slideCards.forEach(card => {
            const thumbnails = card.querySelectorAll('.slide-thumbnail');
            if (thumbnails.length <= 1) return; // サムネイルが1つ以下なら何もしない

            let currentIndex = 0;
            let hoverTimer = null;
            let isHovering = false;

            // ホバー開始時
            card.addEventListener('mouseenter', () => {
                isHovering = true;

                // 一定間隔でサムネイルを切り替える
                hoverTimer = setInterval(() => {
                    if (!isHovering) return;

                    thumbnails[currentIndex].classList.remove('active');
                    currentIndex = (currentIndex + 1) % thumbnails.length;
                    thumbnails[currentIndex].classList.add('active');
                }, 800); // 0.8秒ごとに切り替え
            });

            // ホバー終了時
            card.addEventListener('mouseleave', () => {
                isHovering = false;
                clearInterval(hoverTimer);

                // 最初のサムネイルに戻す
                thumbnails.forEach((thumb, idx) => {
                    if (idx === 0) {
                        thumb.classList.add('active');
                    } else {
                        thumb.classList.remove('active');
                    }
                });
                currentIndex = 0;
            });
        });
    });
</script>
